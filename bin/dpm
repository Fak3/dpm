#!/usr/bin/env node

var path = require('path')
  , dpinit = require('datapackage-init')
  , util = require('util')
  , request = require('request')
  , fs = require('fs')
  , Dpm = require('../lib/index')
  , optimist = require('optimist')
  , read = require('read')
  , async = require('async')
  , rimraf = require('rimraf')
  , split = require('split')
  , tree = require('../lib/tree')
  , readdirpSync = require('fs-readdir-recursive')
  , os = require('os')
  , colors = require('colors');


function getHelpDoc(cmd) {
  var fp = path.join(path.dirname(__dirname), 'doc', 'command-' + cmd + '.md')
    , info = fs.readFileSync(fp, 'utf8')
    ;
  info = info.replace('$0', 'dpm');
  return info;
}

var argv = optimist
  .usage(
    getHelpDoc('help')
  )
  .alias('f', 'force').describe('f', 'just do it')
  .alias('s', 'save').describe('s', 'data packages will appear in your dataDependencies')
  .alias('c', 'cache').describe('c', 'store the resources content on the disk in a data/ directory')
  .alias('h', 'help').describe('h', 'print usage')
  .alias('v', 'version').describe('v', 'print version number')
  .argv;

if(argv.h){
  console.log(optimist.help());
  process.exit(0);
}

if(argv.v){
  console.log(require('../package.json').version);
  process.exit(0);
}

var conf = require('rc')('dpm', {}, process.cwd());
var dpm = new Dpm(conf)

if(argv._[0] !== 'cat'){
  dpm.on('log', console.log);
}

if (argv._[0] === 'init') {
  dpinit.init(dpm.root, function(err, dpkg) {
    var path_ = path.join(dpm.root, 'datapackage.json');
    console.log('datapackage.json written to ' + path_);
  });
} else if (argv._[0] === 'validate') {
  if (argv._.length > 1) {
    dpm.validate(argv._[1]);
  } else {
    dpm.validate(); 
  }
} else if(argv._[0] === 'install'){
  var dpkgIds = argv._.slice(1)
    , options = {cache: argv.cache, force: argv.force}
    ;
  dpm.installFromArgString(dpkgIds, options, function(err, dpkgs) {
    if (err) _fail(err);
    else console.log(tree.deps(dpkgs));
  });
} else if(argv._[0] === 'ckan'){
  dpm.ckan(argv, function(err, msg) {
    if (err) _fail(err);
    else console.log(msg);
  });
} else if(argv._[0] === 'info'){
  argv.identifier = argv._[1];
  dpm.info(argv, function(err, info) {
    if (err) _fail(err);
    else console.log(info.plain);
  });
} else if (argv._[0] === 'help'){
  var cmd = argv._[1];
  if (cmd == 'ident') cmd = 'identifier'
  if(cmd && ['init', 'cat', 'ckan', 'clone', 'dpmrc', 'get', 'info', 'install', 'identifier', 'validate'].indexOf(cmd) !== -1){
    console.log(os.EOL + getHelpDoc(cmd));
  } else {
    console.log(optimist.help());
  }
} else {
  _fail(new Error('invalid command'));
};

function _fail(err){
  if (typeof(err) === 'string') {
    err = new Error(err);
  }
  if(err){
    console.error('dpm'.grey +  ' ERR! '.red + err.message + (('code' in err) ? ' (' + err.code + ')': ''));
    process.exit(1);
  }
};
